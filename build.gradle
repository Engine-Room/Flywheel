plugins {
    id 'com.matthewprenger.cursegradle' version "${cursegradle_version}"
    id 'net.neoforged.gradle.userdev' version '7.0.+'
    id 'net.neoforged.gradle.mixin' version '7.0.+'
    id 'maven-publish'
    id 'eclipse'
}

boolean dev = System.getenv('RELEASE') == null || System.getenv('RELEASE').equalsIgnoreCase('false');

ext.buildNumber = System.getenv('BUILD_NUMBER')

group = 'com.jozufozu.flywheel'
archivesBaseName = "flywheel-forge-${artifact_minecraft_version}"
version = mod_version + (dev && buildNumber != null ? "-${buildNumber}" : '')

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + ' (' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

subsystems {
    parchment {
        enabled = Boolean.parseBoolean(project.use_parchment)
        minecraftVersion = project.minecraft_version
        mappingsVersion = project.parchment_version
    }
}

runs {
    configureEach {
        workingDirectory project.file('run')

        systemProperty 'forge.logging.console.level', 'debug'
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.logging.markers', ''
        systemProperty 'mixin.debug.export', 'true'
        systemProperty 'mixin.env.remapRefMap', 'true'
        systemProperty 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        systemProperty 'flw.loadRenderDoc', 'true'
    }

    server {
        programArgument 'nogui'
    }

    data {
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', 'flywheel', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
    }
}

repositories {
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name 'tterrag maven'
        url 'https://maven.tterrag.com/'
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neoforge_version}"

    // switch to implementation for debugging
    implementation 'maven.modrinth:starlight-neoforge:1.1.3+1.20.4'

    // Rubidium and Oculus don't support 1.20.4 yet
    //compileOnly fg.deobf('maven.modrinth:rubidium:0.7.0a')
    //compileOnly fg.deobf('maven.modrinth:oculus:1.20-1.6.4')
}

mixin {
    config 'flywheel.mixins.json'
    //config 'flywheel.sodium.mixins.json'
}


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

javadoc {
    source = [sourceSets.main.allJava]
    // prevent java 8's strict doclint for javadocs from failing builds
    options.addStringOption('Xdoclint:none', '-quiet')
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : 'flywheel',
                //'Specification-Vendor': 'flywheel authors',
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.jar.archiveBaseName,
                'Implementation-Version'  : project.jar.archiveVersion,
                //'Implementation-Vendor': 'flywheel authors',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs'            : 'flywheel.mixins.json,flywheel.sodium.mixins.json'
        ])
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

void addLicense(jarTask) {
    jarTask.from('LICENSE.md') {
        rename '(.*)\\.(.*)', '$1_' + archivesBaseName + '.$2'
    }
}

addLicense(jar)

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version       : minecraft_version,
            minecraft_version_range : minecraft_version_range,
            neoforge_version_range  : neoforge_version_range,
            loader_version_range    : loader_version_range,
            mod_version             : mod_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName

            from components.java
        }
    }

    repositories {
        if (project.hasProperty('mavendir')) {
            maven { url mavendir }
        }
    }
}

tasks.curseforge.enabled = !dev && project.hasProperty('jozu_curseforge_key')

curseforge {
    if (project.hasProperty('jozu_curseforge_key')) {
        apiKey = project.jozu_curseforge_key
    }

    project {
        id = project.projectId
        changelog = file('changelog.txt')
        releaseType = project.curse_type
        mainArtifact jar
        addGameVersion '1.20.4'
    }
}
