evaluationDependsOn(':common')

base {
    archivesName = "flywheel-${project.name}-${artifact_minecraft_version}"
}

loom {
    runs {
        configureEach {
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'debug'
        }

        client {
            ideConfigGenerated true
            property 'flw.dumpShaderSource', 'true'
            property 'flw.debugMemorySafety', 'true'
            programArgs '--width', '1280', '--height', '720'
        }

        server {
            ideConfigGenerated true
            programArgs '--nogui'
        }
    }
}

dependencies {
    modCompileOnly "net.fabricmc:fabric-loader:$fabric_loader_version"
    modLocalRuntime "net.fabricmc:fabric-loader:$fabric_loader_version"

    modCompileOnly "net.fabricmc.fabric-api:fabric-api:$fabric_api_version"
    modLocalRuntime "net.fabricmc.fabric-api:fabric-api:$fabric_api_version"

    compileOnly project(path: ':common', configuration: 'namedElements')

    // switch to implementation for debugging
    modCompileOnly "maven.modrinth:starlight:$starlight_version"

    modCompileOnly "maven.modrinth:sodium:$sodium_version"
    modCompileOnly "maven.modrinth:iris:$iris_version"

    compileOnly "com.google.code.findbugs:jsr305:3.0.2"
}

tasks.withType(JavaCompile).configureEach {
    source(project(':common').sourceSets.main.allSource)
}

sourcesJar.configure {
    from(project(':common').sourceSets.main.allSource)
}

javadoc.configure {
    source(project(':common').sourceSets.main.allJava)
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from(components["java"])
            artifactId = "flywheel-${project.name}-intermediary-${artifact_minecraft_version}"
        }
    }
    repositories {
        maven {
            url "file://${rootProject.projectDir}/mcmodsrepo"
        }

        if (project.hasProperty('mavendir')) {
            maven { url rootProject.file(property('mavendir')) }
        }
    }
}
